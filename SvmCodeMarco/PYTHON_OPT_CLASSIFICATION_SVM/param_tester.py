import abc
import time

class ParameterTester(object):
    """
    The ParameterTester class provides an interface for tester classes that
    can evaluate the parameters generated by the ParameterGenerator class.
    """
    __metaclass__ = abc.ABCMeta

    ################
    ## Properties ##
    ################
    param_names = []
    parameters = {}
    _parameters = {}
    config_file = ""
    start_command = ""
    param_path = ""
    max_reps = 50 # Maximum number of evaluations for a single set of parameters
    result = None

    ####################
    ## Common Methods ##
    ####################
    def __init__(self):
        super(ParameterTester, self).__init__()
        self.parameters = {}

    def set_parameters(self, parameters):
        """
        Sets the parameters for the next evaluation
        """
        self._parameters = parameters

    def get_result(self):
        """
        Returns the result of the last evaluation
        """
        return self.result

    def write_parameters(self, filename):
        """
        Writes the current set of parameters to the specified path
        """
        config = self.get_config(self._parameters)
        f = open(filename, 'w')
        f.write(config)
        f.close()

    ####################
    ## Abstract Method #
    ####################
    @abc.abstractmethod
    def run_algorithm(self):
        """
        This method must be implemented by a subclass to actually
        evaluate the current set of parameters
        """
        pass

    ###################
    ## Class Methods ##
    ###################
    @classmethod
    def add_parameters(cls, generator):
        """
        This method adds the parameter specification to the
        given generator, and also sets the maximum number of
        evaluations for each set of parameters.
        """
        for name in cls.param_names:
            generator.add_parameter(name, **cls.parameters[name])
        generator.set_max_reps(cls.max_reps)

    @classmethod
    def set_parameter(cls, param_name, config):
        """
        This method changes the settings for a specific parameter. If
        the config parameter is set to None, the parameter will be
        deleted
        """
        if config == None:
            if param_name in cls.parameters:
                del cls.parameters[param_name]
        else:
            cls.parameters[param_name] = config

    @classmethod 
    def get_config(cls, parameters):
        """
        This method returns a valid configuration file/representation, by
        formatting the config_file parameter using the given set of
        parameters
        """
        return cls.config_file % parameters

