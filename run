#!/bin/bash


function usage
{
	echo -e "\n\tUtility to run experiments. \n\tUsage:\n\n\trun [options]\n\n\t-h\tDisplay usage\n\t-r <X>\tRepeat experiment X times\n\t-R <X>\tRepeat experiment X times, using <f>_X as settingsfile\n\t-f <f>\tUse <f> as settingsfile (default: 'settings')\n\t-s\tSilent running,exept for the final 'score' output\n\t-l\tSurpress log generation\n\t-g\tSurpress graphic output\n\t-d <f>\tDocument results and logs in the new folder <f>, subdirectory of build/logs\n\t-a\tPlay alert sound when done\n\t-m\tAdd a memo to logfile\n"
}




tmp=$(make | grep "100%")

if [ "${tmp#*"Built target"}" == "$tmp" ] ; then
   echo ""
   echo "ERROR found: Execution halted."
   echo ""
else


log=1
noIters=0
altSettings=0
silent=0
log=1
document=0
alert=0
graph=1
settings="settings"
memo=0
folderName="LAST_RUN"

while [ "$1" != "" ]; do

    case $1 in
        -r | --repeat   )       shift
                                noIters=$1
                                ;;
        -R | --Repeat   )       shift
                                noIters=$1
				altSettings=1
                                ;;
	-f | --file     )       shift
				settings=$1
				;;
        -s | --silent   )       silent=1
                                ;;
        -h | --help     )       usage
                                exit 1
                                ;;
        -l | --log      )       log=0
                                ;;
        -g | --graph    )       graph=0
                                ;;
        -d | --document )       document=1
                                shift
                                folderName=$1
                                ;;
        -a | --alert    )       alert=1
                                ;;
	-m | --memo     )       memo=1
                                ;;
    esac
    shift
done

if [ $memo == 1 ] ; then
	nano ./build/memo &> .build/logs/errorLOG
	wait
fi

	tmpFolderName=$folderName
	tmpSettings=$settings

   	cd ./build/ &> ./build/logs/errorLOG

	for i in $(seq 0 $noIters) ;do
   		
		if [ $altSettings == 1 ] ; then tmpSettings=$settings"_"$i ; fi

   		logName="LOG"$(date +_%m-%d_%H:%M:%S)

		if [ $memo == 1 ] ; then
			echo $logName >> ./logs/$logName 2> ./logs/errorLOG
			cat ./memo >> ./logs/$logName 2> ./logs/errorLOG
			echo "" >> ./logs/$logName 2> ./logs/errorLOG
			rm ./memo 2> ./logs/errorLOG
		fi

   		echo "SETTINGS: Score: 333" >> ./logs/$logName 2> ./logs/errorLOG
        	echo "" >> ./logs/$logName 2> ./logs/errorLOG
        	cat $tmpSettings >> ./logs/$logName 2> ./logs/errorLOG
   		echo "" >> ./logs/$logName 2> ./logs/errorLOG
        	echo "" >> ./logs/$logName 2> ./logs/errorLOG

		if [ $silent == 1 ] ; then
			./CSVM $tmpSettings >> ./logs/$logName &> ./logs/errorLOG
			score=$(grep "Score:" ./logs/$logName | grep -o "[0123456789.]*" | grep "[1234567890]" | tail -1 2> ./logs/errorLOG)
			echo $score
		else
   			./CSVM $tmpSettings |& tee -a ./logs/$logName 2> ./logs/errorLOG 
			score=$(grep "Score:" ./logs/$logName | grep -o "[0123456789.]*" | grep "[1234567890]" | tail -1 2> ./logs/errorLOG)
   			echo ""
   			echo ""
		fi

		R --no-save < ../genRplots &> ./logs/errorLOG

		convert +append SVM_5.png SVM_6.png SVM_7.png SVM_8.png SVM_9.png tmp_B.png &> ./logs/errorLOG
		convert +append SVM_0.png SVM_1.png SVM_2.png SVM_3.png SVM_4.png tmp_T.png &> ./logs/errorLOG
		convert -append tmp_T.png tmp_B.png overview.png &> ./logs/errorLOG

		rm tmp_T.png &> ./logs/errorLOG
		rm tmp_B.png &> ./logs/errorLOG
		
		if (( $noIters > 1 )) ; then tmpFolderName=$folderName"_"$i ; echo $noIters ; fi

		if [ $folderName == "LAST_RUN" ] ; then rm logs/LAST_RUN/* 2> ./logs/errorLOG ; fi

		if [ $tmpFolderName != "LAST_RUN" ] ; then mkdir ./logs/$tmpFolderName &> ./logs/errorLOG ; fi

		cp -v ./logs/$logName ./logs/$tmpFolderName &> ./logs/errorLOG
		cp -v ./SVM_* ./logs/$tmpFolderName &> ./logs/errorLOG
		cp -v ./overview.png ./logs/$tmpFolderName &> ./logs/errorLOG
		cp -v ./statData_SVM* ./logs/$tmpFolderName &> ./logs/errorLOG
		cp -vr ./Weights*/ ./logs/$tmpFolderName &> ./logs/errorLOG
		cp -v ./settings ./logs/$tmpFolderName &> ./logs/errorLOG
		cp -v ./LAST_USED.bin ./logs/$tmpFolderName &> ./logs/errorLOG
		cp -v ./logs/errorLOG ./logs/$tmpFolderName &> ./logs/errorLOG

		if [ $graph == 1 ] ; then xdg-open ./logs/$tmpFolderName/overview.png 2> ./logs/errorLOG ; fi

		if [ $alert == 1 ] ; then aplay /usr/share/sounds/alsa/Side_Right.wav &> /dev/null &> ./logs/errorLOG ; fi

		if [ $log == 0 ] ; then rm ./logs/$logName &> ./logs/errorLOG ; fi

	done

	rm -v ./SVM_* &> ./logs/errorLOG
	rm -v ./overview.png &> ./logs/errorLOG
	rm -v ./statData* &> ./logs/errorLOG
	rm -v ./R_dataDump* &> ./logs/errorLOG
	rm -rv ./Weights* &> ./logs/errorLOG

fi
